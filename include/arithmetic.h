// объявление функций и классов для вычисления арифметических выражений

include "stack.h"

class TPostfix {
	std::vector<std::string> RPN;
	
	const std::string pr[11] = { "+", "-", "*", "/", "~", "sin", "cos", "tan", "cot", "exp", "log" }; //Элементы заданы в порядке, таком, что операции, не обладающие 
	//ассоциативностью (-, \), идут после операций, обладающех ею, тк нам не важно, в каком порядке мы складываем и умножаем, но важно, в каком порядке мы вычитаем и делим
	//формально, с таким списком приоритетов операции вычитания(деления) берутся в скобки и рассматриваются как цельное слагаемое(множитель)
	// например: 3+5-1-2+4 будет восприниматься как (3+((5-1)-2))+4
	//унарный минус идёт перед функциями, иначе при написании -func() возникнут проблемы
	//порядок функций нам не важен, тк они (при верном написании) всегда будут разделены скобками или другой операцией, которая не позволит им лежать подряд в стеке
	
	std::string Error_string(std::string& s, int i); //Метод выделяющий первый ошибочный элемент в строке
	
	bool is_op_or_func(std::string s); //проверка на то, является ли операцией или функцией
	
	bool is_op_or_func(char c); //аналогичная проверка для char
	
	int get_prior(std::string& s); //Получить приоритет операции
	
	double valid(std::string& s); //Метод, превращающий строку, которая уже проверена на корректность, в число
	
	std::string number_check(std::string& s, int& i); //Метод принимает обрабатываемую строку и индекс, с которого начинается число и проверяет его на корректность, возвращая его
public:
	TPostfix(std::string& s); //Преобразовать строку в постфиксную форму записи, если это возможно
	
	double count(); //Посчитать строку, хранящуюся в элементе класса
};